/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package onlineJobBankSystem;

/**
 *
 * @author David
 */
public class AdminFunctions extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    OracleConnection DB;
    String user;
    public AdminFunctions(OracleConnection DB) {
        this.DB = DB;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        dropTablesBtn = new javax.swing.JButton();
        createTablesBtn = new javax.swing.JButton();
        populateTablesBtn = new javax.swing.JButton();
        queryTablesBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 204, 255));
        setForeground(new java.awt.Color(102, 255, 255));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CareerCove");

        dropTablesBtn.setText("Drop Tables");
        dropTablesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropTablesBtnActionPerformed(evt);
            }
        });

        createTablesBtn.setText("Create Tables");
        createTablesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTablesBtnActionPerformed(evt);
            }
        });

        populateTablesBtn.setText("Populate Tables");
        populateTablesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populateTablesBtnActionPerformed(evt);
            }
        });

        queryTablesBtn.setText("Query Tables");
        queryTablesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryTablesBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setLineWrap(true);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queryTablesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(createTablesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                        .addComponent(dropTablesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(populateTablesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 149, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(dropTablesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createTablesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(populateTablesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(queryTablesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentAdded

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // Exit
        this.dispose();
    }//GEN-LAST:event_exitBtnActionPerformed

    private void dropTablesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropTablesBtnActionPerformed
        // clear output 
        output.setText("");
        String drop = """
                DROP TABLE JobSeeker CASCADE CONSTRAINTS;
                DROP TABLE Resume CASCADE CONSTRAINTS;
                DROP TABLE UserProfile CASCADE CONSTRAINTS;
                DROP TABLE UserInfo CASCADE CONSTRAINTS;
                DROP TABLE Employer CASCADE CONSTRAINTS;
                DROP TABLE JobListing CASCADE CONSTRAINTS;
                DROP TABLE Application CASCADE CONSTRAINTS;
                """;
        output.setText(DB.runSQLCode(drop));
    }//GEN-LAST:event_dropTablesBtnActionPerformed

    private void createTablesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTablesBtnActionPerformed
        output.setText("");
        String create = """
            CREATE TABLE JobSeeker (
                Username                            VARCHAR2(16) UNIQUE,
                FullName                            VARCHAR2(32),
                Address                             VARCHAR2(32),
                Education                           VARCHAR2(64),
                PendingInterviews                   VARCHAR2(256)
            );
            
            CREATE TABLE Resume (
                ResumeID                            INTEGER PRIMARY KEY,
                Skills                              VARCHAR2(1024) DEFAULT 'None listed',
                WorkExperience                      VARCHAR2(1024) DEFAULT 'None listed',
                Username                            VARCHAR2(16),
                FOREIGN KEY (Username) REFERENCES JobSeeker(Username) ON DELETE CASCADE
            );
            
            CREATE TABLE UserProfile (
                Username                            VARCHAR2(16) PRIMARY KEY,
                PhoneNumber                         VARCHAR2(12) DEFAULT 'XXX-XXX-XXXX' NOT NULL,
                Password                            VARCHAR2(32),
                FullName                            VARCHAR2(32),
                UserLocation                        VARCHAR2(32)
            );
            
            CREATE TABLE UserInfo (
                Username                            VARCHAR2(16) PRIMARY KEY,
                Password                            VARCHAR2(32) NOT NULL,
                Type                                VARCHAR2(10) NOT NULL
            );
            
            CREATE TABLE Employer (
                RecruiterID                         VARCHAR2(16) UNIQUE,
                FullName                            VARCHAR2(32),
                Company                             VARCHAR2(32) NOT NULL
            );
            
            CREATE TABLE JobListing (
                JobID                               VARCHAR(32) PRIMARY KEY,
                JobTitle                            VARCHAR2(32) NOT NULL,
                RecruiterID                         VARCHAR2(16) NOT NULL REFERENCES Employer(RecruiterID) ON DELETE CASCADE,
                JobDescription                      VARCHAR2(256) NOT NULL,
                JobLocation                         VARCHAR2(32),
                ApplicationDeadline                 VARCHAR2(16) NOT NULL,
                Wage                                VARCHAR2(16) NOT NULL
            );
            
            CREATE TABLE Application (
                ApplicationID                       INTEGER PRIMARY KEY,
                Status                              VARCHAR2(8) NOT NULL,
                Username                            VARCHAR2(16) NOT NULL REFERENCES JobSeeker(Username) ON DELETE CASCADE,
                JobID                               VARCHAR2(32) NOT NULL REFERENCES JobListing(JobID) ON DELETE CASCADE,
                ResumeID                            INTEGER NOT NULL REFERENCES Resume(ResumeID) ON DELETE CASCADE
            );  
            """;
        output.setText(DB.runSQLCode(create));
    }//GEN-LAST:event_createTablesBtnActionPerformed

    private void populateTablesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populateTablesBtnActionPerformed
        output.setText("");
        String populate = """
            -- 1. Insert data into UserInfo table
            INSERT INTO UserInfo(Username, Password, Type)
            VALUES('recruiter', 'recruiter123', 'recruiter');
            
            INSERT INTO UserInfo(Username, Password, Type)
            VALUES('recruiter2', 'recruiter123', 'recruiter');
            
            INSERT INTO UserInfo(Username, Password, Type)
            VALUES('recruiter3', 'recruiter123', 'recruiter');
            
            INSERT INTO UserInfo(Username, Password, Type)
            VALUES('recruiter4', 'recruiter123', 'recruiter');
            
            
            INSERT INTO UserInfo(Username, Password, Type)
            VALUES('applicant', 'applicant123', 'applicant');
            
            -- 2. Insert data into JobSeeker table
            INSERT INTO JobSeeker(Username, FullName, Address, Education, PendingInterviews)
            VALUES('applicant', 'John Doe', '1234 Elm Street, City, State', 'Bachelors in Computer Science', 'None');
            
            -- 3. Insert data into Resume table (applicant's resume)
            INSERT INTO Resume(ResumeID, Skills, WorkExperience, Username)
            VALUES(1, 'Java, SQL, Python', 'Software Engineer at XYZ Corp for 3 years', 'applicant');
            
            -- 4. Insert data into UserProfile table
            INSERT INTO UserProfile(Username, PhoneNumber, Password, FullName, UserLocation)
            VALUES('recruiter', '555-123-4567', 'recruiter123', 'Jane Recruiter', 'San Francisco');
            
            INSERT INTO UserProfile(Username, PhoneNumber, Password, FullName, UserLocation)
            VALUES('applicant', '555-987-6543', 'applicant123', 'John Doe', 'New York');
            
            -- 5. Insert data into Employer table
            INSERT INTO Employer(RecruiterID, FullName, Company)
            VALUES('recruiter', 'John Doe', 'Tech Solutions');
            
            INSERT INTO Employer(RecruiterID, FullName, Company)
            VALUES('recruiter2', 'Trish Vone', 'TechLabs');
            
            INSERT INTO Employer(RecruiterID, FullName, Company)
            VALUES('recruiter3', 'Edgar Mack', 'Doordash Inc');
            
            INSERT INTO Employer(RecruiterID, FullName, Company)
            VALUES('recruiter4', 'David Liu', 'Google');
            
            
            -- 6. Insert data into JobListing table
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('software1', 'Software Engineer', 'recruiter', 'Develop and maintain software applications.', 'San Francisco', '2024-12-01', '$100,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('science2', 'Data Scientist', 'recruiter2', 'Analyze data and build models', 'San Francisco', '2024-12-31', '$95,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('software3', 'Product Manager', 'recruiter2', 'Manage product lifecycle and roadmap', 'New York', '2024-12-15', '$105,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('design4', 'UX Designer', 'recruiter', 'Design user interfaces and experiences', 'Los Angeles', '2025-01-15', '$85,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('business10', 'Business Analyst', 'recruiter3', 'Analyze business data to improve company operations and strategies.', 'Chicago', '2025-05-01', '$90,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('astrology11', 'Astrologer', 'recruiter3', 'Interpret astrological charts and provide guidance based on celestial positions.', 'Los Angeles', '2025-06-01', '$75,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('business12', 'Marketing Manager', 'recruiter4', 'Lead and strategize marketing campaigns to boost brand presence and sales.', 'New York', '2025-07-01', '$95,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('physiology13', 'Physiologist', 'recruiter', 'Study human physiology and provide consultations on health and wellness.', 'San Francisco', '2025-08-01', '$85,000');
            
            INSERT INTO JobListing(JobID, JobTitle, RecruiterID, JobDescription, JobLocation, ApplicationDeadline, Wage)
            VALUES('astrology14', 'Astrology Consultant', 'recruiter3', 'Advise clients on life decisions based on astrological insights and charts.', 'Miami', '2025-09-01', '$80,000');
            
            
            -- 7. Insert data into Application table
            INSERT INTO Application(ApplicationID, Status, Username, JobID, ResumeID)
            VALUES(1, 'Pending', 'applicant', 'software1', 1);
            
            INSERT INTO Application(ApplicationID, Status, Username, JobID, ResumeID)
            VALUES(2, 'Pending', 'applicant', 'science2', 1);
            
            INSERT INTO Application(ApplicationID, Status, Username, JobID, ResumeID)
            VALUES(3, 'Pending', 'applicant', 'software3', 1);
            
            INSERT INTO Application(ApplicationID, Status, Username, JobID, ResumeID)
            VALUES(4, 'Pending', 'applicant', 'design4', 1);
            """;
        output.setText(DB.runSQLCode(populate));
    }//GEN-LAST:event_populateTablesBtnActionPerformed

    private void queryTablesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryTablesBtnActionPerformed
        output.setText("");
        String queries = """
            -- Query to retrieve any job listings that do not have any applications --
            SELECT JobID, JobTitle, JobLocation, Wage
            FROM JobListing
            MINUS
            SELECT JobListing.JobID, JobListing.JobTitle, JobListing.JobLocation, JobListing.Wage
            FROM JobListing
            JOIN Application ON JobListing.JobID = Application.JobID;
            
            
            -- Query to retrieve all job seekers that applied for Data Analyst or Software developer positions --
            SELECT DISTINCT JobSeeker.FullName, JobSeeker.Username, JobListing.JobTitle
            FROM JobSeeker
            JOIN Application ON JobSeeker.Username = Application.Username
            JOIN JobListing ON Application.JobID = JobListing.JobID
            Where JobListing.JobTitle = 'Data Analyst'
            UNION
            SELECT DISTINCT JobSeeker.FullName, JobSeeker.Username,JobListing.JobTitle
            FROM JobSeeker
            JOIN Application ON JobSeeker.Username = Application.Username
            JOIN JobListing ON Application.JobID = JobListing.JobID
            WHERE JobListing.JobTitle = 'Software Developer';
            
            -- Query that retrieves all the names of applicants who have applied to any job(s) with a salary greater than $50,000 --
            SELECT DISTINCT JobSeeker.FullName
            FROM JobSeeker
            WHERE EXISTS (
            SELECT *
            FROM Application
            JOIN JobListing ON Application.JobID = JobListing.JobID
            WHERE Application.Username = JobSeeker.Username
            AND JobListing.Wage > '$50000'
            );
            
            
            --Query Find Job Listings with more than 3 applications--
            SELECT JobListing.JobTitle, JobListing.JobLocation, COUNT(Application.ApplicationID) AS TotalApplications
            FROM JobListing
            JOIN Application ON JobListing.JobID = Application.JobID
            GROUP BY JobListing.JobTitle, JobListing.JobLocation
            HAVING COUNT(Application.ApplicationID) > 3
            ORDER BY TotalApplications DESC;
            
            
            --Query to retrieve job seekers who have applied to more than two jobs--
            SELECT JobSeeker.FullName, JobSeeker.Username, COUNT(Application.JobID) AS JobApplications
            FROM JobSeeker
            JOIN Application ON JobSeeker.Username = Application.Username
            GROUP BY JobSeeker.FullName, JobSeeker.Username
            HAVING COUNT(Application.JobID) > 2
            ORDER BY JobApplications DESC;
            """;
        output.setText(DB.runSQLCode(queries));
    }//GEN-LAST:event_queryTablesBtnActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createTablesBtn;
    private javax.swing.JButton dropTablesBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea output;
    private javax.swing.JButton populateTablesBtn;
    private javax.swing.JButton queryTablesBtn;
    // End of variables declaration//GEN-END:variables
}
